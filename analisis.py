import os
import sys
import django
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configuraci√≥n de Django
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.join(BASE_DIR, 'biblioteca_virtual'))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'biblioteca_virtual.settings')
django.setup()

from libros.models import Calificaci√≥n, Libro

print("üîé Analizando calificaciones...")

# Consulta ORM
calificaciones_qs = Calificaci√≥n.objects.select_related('libro').all()
total = calificaciones_qs.count()
print(f"üìä Total de calificaciones encontradas: {total}")

if total == 0:
    print("‚ö†Ô∏è No se encontraron calificaciones. Ejecut√° el generador primero.")
    exit()

# Convertir a lista de diccionarios
data = []
for c in calificaciones_qs:
    libro = c.libro
    generos = [g.nombre for g in libro.generos.all()]
    data.append({
        'Libro': libro.titulo,
        'Autor': str(libro.autor),
        'G√©neros': ', '.join(generos),
        'Puntaje': c.puntaje
    })

# Crear DataFrame
df = pd.DataFrame(data)
print("\nüìÑ Primeros registros:")
print(df.head(10))

# Guardar CSV para usar en Colab o Excel
csv_path = os.path.join(BASE_DIR, "calificaciones.csv")
df.to_csv(csv_path, index=False)
print(f"\nüíæ CSV exportado exitosamente en: {csv_path}")

# Explosi√≥n por g√©nero para an√°lisis por categor√≠a
df_explotado = df.copy()
df_explotado['G√©neros'] = df_explotado['G√©neros'].str.split(', ')
df_explotado = df_explotado.explode('G√©neros')

# Promedio por g√©nero
print("\nüìà Promedio de puntaje por g√©nero:")
print(df_explotado.groupby('G√©neros')['Puntaje'].mean().sort_values(ascending=False))

# Gr√°fico 1: Promedio de puntaje por g√©nero
promedios = df_explotado.groupby('G√©neros')['Puntaje'].mean().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
promedios.plot(kind='bar', color='skyblue')
plt.title('üìä Promedio de Puntaje por G√©nero')
plt.xlabel('G√©nero')
plt.ylabel('Puntaje Promedio')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig(os.path.join(BASE_DIR, "grafico_promedios_por_genero.png"))
plt.show()

# Gr√°fico 2: Distribuci√≥n de puntajes por g√©nero (boxplot)
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_explotado, x='G√©neros', y='Puntaje', palette='pastel')
plt.title('üéØ Distribuci√≥n de Puntajes por G√©nero')
plt.xlabel('G√©nero')
plt.ylabel('Puntaje')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig(os.path.join(BASE_DIR, "grafico_distribucion_puntajes.png"))
plt.show()

# Libros top por g√©nero con puntaje >= 4.5
print("\nüèÜ Libros recomendados por g√©nero (Puntaje >= 4.5):")
top_libros = df_explotado[df_explotado['Puntaje'] >= 4.5].groupby('G√©neros')['Libro'].unique()
print(top_libros)

# Gr√°fico 3: Cantidad de libros recomendados (>=4.5) por g√©nero
recomendados = df_explotado[df_explotado['Puntaje'] >= 4.5]
conteo_top = recomendados.groupby('G√©neros')['Libro'].nunique().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
conteo_top.plot(kind='bar', color='lightgreen')
plt.title('üèÜ Libros Recomendados por G√©nero (Puntaje ‚â• 4.5)')
plt.xlabel('G√©nero')
plt.ylabel('Cantidad de Libros')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig(os.path.join(BASE_DIR, "grafico_libros_recomendados.png"))
plt.show()